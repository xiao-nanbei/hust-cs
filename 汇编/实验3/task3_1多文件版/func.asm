.686P
.model flat,c
printf          PROTO C :VARARG
scanf           PROTO C :VARARG
 GOODS STRUCT
 GOODSNAME DB 10 DUP(0)
 BUYPRICE DW 0
 SELLPRICE DW 0
 BUYNUM DW 0
 SELLNUM DW 0
 RATE DW 0
GOODS ENDS
extern lpFmt1:sbyte,lpFmt2:sbyte,lpFmt3:sbyte,lpFmt4:sbyte,lpFmt:sbyte
extern FIND_ITEM:sbyte,FIND_FAIL:sbyte,SOLD_ITEM:sbyte,NOT_ENOUGH:sbyte,SUPPLE_ITEM:sbyte
extern SOLD_NUM:word,SUPPLE_NUM:word,MAX_NUM:word,MIN_NUM:word
extern IN_ITEM:SBYTE
extern I_NUM:dword,TEMP:dword,J_NUM:dword,FLAG_SOLD:dword,FLAG_EQULES:dword
extern GA1:GOODS,GA5:GOODS
FLAG_TO_0 macro v1
	PUSH EAX
	MOV	EAX,0
	MOV v1,EAX
	POP	EAX
	endm
FLAG_TO_1 macro v1
	PUSH EAX
	MOV	EAX,1
	MOV	v1,EAX
	POP EAX
	endm
.CODE
EQULES_FUN proc
	ADD ESI,EBX
	MOV ECX,0AH
	REPE CMPSB
	JZ EQULES_FUN_EXIT
	SET_FLAG:
		FLAG_TO_0 FLAG_EQULES
	EQULES_FUN_EXIT:
		ret
EQULES_FUN endp
FIND_FUN proc
	INVOKE printf,OFFSET lpFmt1,OFFSET FIND_ITEM
	INVOKE scanf,OFFSET lpFmt2,OFFSET IN_ITEM
	MOV EBX,0
	MOV EAX,4
	MOV	I_NUM,EAX
	FLAG_TO_1 FLAG_EQULES
	PWORK:
		LEA ESI,GA1
		LEA	EDI,IN_ITEM
		CALL EQULES_FUN
		CMP FLAG_EQULES,1
		JZ	OUT_PUT
		MOV	EAX,1
		MOV	FLAG_EQULES,EAX
		ADD EBX,20
		DEC I_NUM
		JNZ PWORK
	INVOKE printf,OFFSET lpFmt1,OFFSET FIND_FAIL
	JMP	FIND_FUN_EXIT
	OUT_PUT:
		INVOKE printf,OFFSET lpFmt1,OFFSET IN_ITEM
		INVOKE printf,OFFSET lpFmt4,GA1[EBX][10]
		INVOKE printf,OFFSET lpFmt4,GA1[EBX][12]
		INVOKE printf,OFFSET lpFmt4,GA1[EBX][14]
		INVOKE printf,OFFSET lpFmt4,GA1[EBX][16]
		INVOKE printf,OFFSET lpFmt4,WORD PTR GA1[EBX][18]
	FIND_FUN_EXIT:
		ret
FIND_FUN endp
SOLD_FUN proc
SOLD:
	INVOKE printf,OFFSET lpFmt1,OFFSET FIND_ITEM
	INVOKE scanf,OFFSET lpFmt2,OFFSET IN_ITEM
	INVOKE printf,OFFSET lpFmt1,OFFSET SOLD_ITEM
	INVOKE scanf,OFFSET lpFmt3,OFFSET SOLD_NUM
	MOV EBX,0
	MOV EAX,4
	MOV	I_NUM,EAX
	FLAG_TO_1 FLAG_EQULES
	SOLD_PWORK:
		LEA ESI,GA1
		LEA	EDI,IN_ITEM
		CALL EQULES_FUN
		CMP FLAG_EQULES,1
		JZ	OUT_SOLD
		MOV	EAX,1
		MOV	FLAG_EQULES,EAX
		ADD EBX,20
		DEC I_NUM
		JNZ SOLD_PWORK
	INVOKE printf,OFFSET lpFmt1,OFFSET FIND_FAIL
	JMP	SOLD_FUN_EXIT
	OUT_SOLD:
		MOV AX,WORD PTR GA1[EBX][14]
		MOV CX,WORD PTR GA1[EBX+16]
		CMP AX,SOLD_NUM
		JB	NOT_EN
		SUB AX,SOLD_NUM
		CMP AX,CX
		JB	NOT_EN
		ADD CX,SOLD_NUM
		MOV WORD PTR GA1[EBX+16],CX
		JMP SOLD_FUN_EXIT
		NOT_EN:
		INVOKE printf,OFFSET lpFmt1,OFFSET NOT_ENOUGH
	SOLD_FUN_EXIT:
		ret
SOLD_FUN endp
SUPPLE_FUN	proc
	INVOKE printf,OFFSET lpFmt1,OFFSET FIND_ITEM
	INVOKE scanf,OFFSET lpFmt2,ADDR[IN_ITEM]
	INVOKE printf,OFFSET lpFmt1,OFFSET SUPPLE_ITEM
	INVOKE scanf,OFFSET lpFmt3,OFFSET SUPPLE_NUM
	MOV EBX,0
	MOV EAX,4
	MOV	I_NUM,EAX
	FLAG_TO_1 FLAG_EQULES
	SUPPLE_PWORK:
		LEA ESI,GA1
		LEA	EDI,IN_ITEM
		CALL EQULES_FUN
		CMP FLAG_EQULES,1
		JZ	OUT_SUPPLE
		MOV	EAX,1
		MOV	FLAG_EQULES,EAX
		ADD EBX,20
		DEC I_NUM
		JNZ	SUPPLE_PWORK
	INVOKE printf,OFFSET lpFmt1,OFFSET FIND_FAIL
	JMP	SUPPLE_FUN_EXIT
	OUT_SUPPLE:
		MOV AX,WORD PTR GA1[EBX][14]
		ADD AX,SUPPLE_NUM
		MOV WORD PTR GA1[EBX+14],AX
	SUPPLE_FUN_EXIT:
		ret
SUPPLE_FUN endp 
CLU_FUN	proc
	MOV ESI,0
	MOV EDI,4
	CLU_PWORK_FUN:
		MOV EAX,0
		MOV EBX,0
		MOV AX,WORD PTR GA1[ESI+12]
		IMUL AX,WORD PTR GA1[ESI+16]
		MOV BX,WORD PTR GA1[ESI+10]
		IMUL BX,WORD PTR GA1[ESI+14]
		SUB AX,BX
		MOVSX EAX,AX
		MOVSX EBX,BX
		IMUL EAX,100
		CDQ
		IDIV EBX
		MOV WORD PTR[GA1+ESI+18],AX
		INVOKE printf,OFFSET lpFmt4,WORD PTR GA1[ESI+18]
		ADD ESI,20
		DEC EDI
		JNZ CLU_PWORK_FUN
	CLU_FUN_EXIT:
		ret
CLU_FUN endp
SORT_FUN proc 
	MOV EDI,4
	MOV CX,WORD PTR GA5[18]
	MOV	I_NUM,EDI
	SORT_PWORK_1_FUN:
		MOV EDI,0
		MOV	FLAG_SOLD,0
		MOV ESI,4
		MOV J_NUM,ESI
		MOV	ESI,0
		MOV EAX,0
		MOV EBX,0
		MOV DX,WORD PTR GA1[ESI+18]
		MOV MAX_NUM,DX
		SORT_PWORK_2_FUN:
			MOV DX,WORD PTR GA1[ESI+18]
			CMP DX,MAX_NUM
			JGE	OUT_SORT_FUN
			GET_FUN:
			ADD	ESI,20
			DEC J_NUM
			JNZ	SORT_PWORK_2_FUN
			CMP FLAG_SOLD,0
			JE SOLD_END_FUN
			MOV EBX,OFFSET GA1
			ADD	EBX,EDI
			INVOKE printf,OFFSET lpFmt1,EBX
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][10]
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][12]
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][14]
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][16]
			INVOKE printf,OFFSET lpFmt4,WORD PTR GA1[EDI][18]
			MOV CX,MAX_NUM
		DEC I_NUM
		JNZ	SORT_PWORK_1_FUN
	OUT_SORT_FUN:
		CMP	DX,CX
		JGE	OUT_SORT_2_FUN
		MOV	MAX_NUM,DX
		MOV	EDI,ESI
		ADD FLAG_SOLD,1
		OUT_SORT_2_FUN:
			JMP GET_FUN
	SOLD_END_FUN:
		MOV EAX,4
		MOV J_NUM,EAX
		MOV	ESI,0
		MOV DX,WORD PTR GA1[ESI+18]
		MOV MIN_NUM,DX
		SOLD_END_PWOEK_FUN:
			MOV DX,WORD PTR GA1[ESI+18]
			CMP DX,MIN_NUM
			JL	OUT_SOLD_END_FUN
			GET_END_FUN:
			ADD ESI,20
			DEC J_NUM
			JNZ	SOLD_END_PWOEK_FUN
			MOV EBX,OFFSET GA1
			ADD	EBX,EDI
			INVOKE printf,OFFSET lpFmt1,EBX
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][10]
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][12]
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][14]
			INVOKE printf,OFFSET lpFmt4,GA1[EDI][16]
			INVOKE printf,OFFSET lpFmt4,WORD PTR GA1[EDI][18]
		JMP	SORT_FUN_EXIT
		OUT_SOLD_END_FUN:
			MOV MIN_NUM,DX
			MOV EDI,ESI
			JMP	GET_END_FUN
	SORT_FUN_EXIT:
		ret
SORT_FUN endp
END
